[{"content":"本文主要基于Hugo和Stack主题\n基本语法 Stack主题Frontmatter Configs Markdown Cheatsheet 还可以用到一些html的语法，但我暂时只学会了写\u0026lt;kbd\u0026gt;Enter\u0026lt;/kbd\u0026gt;Enter\nKaTeX与渲染问题 Stack主题支持KaTeX。KaTeX数学公式 注意如果需要显示KaTeX公式需要在Frontmatter里写math: true\nHugo有时会有无法正确渲染KaTeX的问题，我遇到的问题是用$$包裹的%或\\%无法显示\n上网搜索找到了相应的解决办法：Chlorine：在Hugo博客中正确渲染多行数学公式 如果用的也是Stack主题那么只需要添加这些代码就可以了：\n1markup: 2 goldmark: 3 extensions: 4 passthrough: 5 enable: true 6 delimiters: 7 block: 8 - - \\[ 9 - \\] 10 - - $$ 11 - $$ 12 inline: 13 - - \\( 14 - \\) 15 - - $ # 这里 16 - $ # 这里\r注意输入百分号或下划线等需要转义的符号还是需要在前面加反斜杠：\\% \\_\n短代码 可以参见树响集：短代码应用 ，整理的很全\n构建网页时不上传草稿 1# 构建排除草稿 2build: 3 excludeDrafts: true\r1--- 2title: 这是一篇草稿文章 3description: 它只在本地预览时出现，构建网页时不会放入public文件夹 4date: 2025-10-17 5draft: true # true-草稿；false-非草稿 6---\r本地预览时使用hugo server -D指令，则显示草稿；\n构建时使用hugo指令，则忽略草稿（如果用hugo -D则上传草稿）\n使用iframe嵌入网页 iframe可以用来嵌入外部网页或本地html。\n基本格式：\u0026lt;iframe src=\u0026quot;网址或本地html路径\u0026quot; style=\u0026quot;width:100%;……css怎么写就怎么写\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\n如果需要嵌入本地html，注意把文件放在项目根目录\\static\\下，src里写static文件夹下的路径\n嵌入Godot制作的网页游戏 具体写在另一个帖子里了：第一个2D游戏 别的游戏引擎导出的项目文件应该也大差不差，但我没用过所以不乱说\n我这个嵌入的游戏手机端是玩不了的，会卡在开始界面（虽然本来也没有设计给移动端玩，用的键盘操控），不知道有没有解决方案\n嵌入思维导图 使用开源工具Markmap来实现。（GitHub ）\n打开网址 https://markmap.js.org/repl ，左边栏可以用markdown语法写下需要整理成思维导图的内容，右边会生成思维导图。\n点击Download as interactive HTML，将下载的文件放到项目根目录\\static中\n在.md文件中使用iframe嵌入下载的html文件：\n1\u0026lt;iframe src=\u0026#34;/p/markmap.html\u0026#34; 2style=\u0026#34;width:100%; 3height:60vh; 4border:none; 5border-radius:20px;\u0026#34;\u0026gt; 6\u0026lt;/iframe\u0026gt;\r不建议导出为svg嵌入，可能会有显示不完全的问题\n多个表格横排 deepseek帮写的，仅记录\n已发现手机上显示会横向超出屏幕的问题，但也不怎么用到就懒得想办法优化了\n表格一\n姓名 年龄 城市 张三 25 北京 李四 30 上海 表格二\n产品 价格 库存 手机 2999 50 电脑 5999 20 表格三\n月份 收入 支出 1月 1000 500 2月 1200 600 1\u0026lt;div style=\u0026#34;display: flex; gap: 20px; justify-content: space-between;\u0026#34;\u0026gt; 2 3\u0026lt;div style=\u0026#34;flex: 1;\u0026#34;\u0026gt; 4 5表格一 6| 姓名 | 年龄 | 城市 | 7| ---- | ---- | ---- | 8| 张三 | 25 | 北京 | 9| 李四 | 30 | 上海 | 10 11\u0026lt;/div\u0026gt; 12 13\u0026lt;div style=\u0026#34;flex: 1;\u0026#34;\u0026gt; 14 15表格二 16| 产品 | 价格 | 库存 | 17| ---- | ---- | ---- | 18| 手机 | 2999 | 50 | 19| 电脑 | 5999 | 20 | 20 21\u0026lt;/div\u0026gt; 22 23\u0026lt;div style=\u0026#34;flex: 1;\u0026#34;\u0026gt; 24 25表格三 26| 月份 | 收入 | 支出 | 27| ---- | ---- | ---- | 28| 1月 | 1000 | 500 | 29| 2月 | 1200 | 600 | 30 31\u0026lt;/div\u0026gt; 32 33\u0026lt;/div\u0026gt;","date":"2025-10-17T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E7%94%A8markdown%E5%86%99hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/","title":"用Markdown写Hugo博客的一些小技巧"},{"content":"本文基于Hugo版本0.150.0，Stack版本3.31.0，部分代码使用AI完成\n预览图\r代码字体修改 使用了Fira Code字体（链接 ）\n1\u0026lt;style\u0026gt; 2 @font-face { 3 font-family: \u0026#39;mkty\u0026#39;; 4 src: url({{ (resources.Get \u0026#34;font/mkty.ttf\u0026#34;).Permalink }}) format(\u0026#39;truetype\u0026#39;); 5 } 6 7 @font-face { 8 font-family: \u0026#39;Fira Code\u0026#39;; 9 src: 10 url(\u0026#39;/font/fira-code/FiraCode-Light.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), 11 url(\u0026#39;/font/fira-code/FiraCode-Light.woff\u0026#39;) format(\u0026#39;woff\u0026#39;); 12 } 13 14 :root { 15 --base-font-family: \u0026#39;mkty\u0026#39;; 16 --code-font-family: \u0026#39;Fira Code\u0026#39;, \u0026#39;mkty\u0026#39;; 17 } 18\u0026lt;/style\u0026gt;\r其中mkty是我的主字体，我希望代码块里面的中文字体保持这个字体，于是:root{--code-font-family: 'Fira Code', 'mkty';}\nFira Code这个字体包下载完了有很多字体文件，网页用.woff和.woff2就够了，根据你喜欢的字重挑选相应的文件放到项目根目录\\assets\\font\\下面即可\n同时修改了样式：\n1// 代码块字体样式 2code, 3pre, 4.highlight { 5 font-weight: 300 !important; 6 // font-size: 1.6rem; 7} 8//行内代码 9.article-content code { 10 border: none; 11 border-radius: 4px ; 12 font-size: 0.85em ; 13}\r代码块折叠展开 参考莱特雷的博客 我用了stack主题目录里自带的assets\\icons\\top.svg，复制了一张改了方向作为图标\n主要在原代码基础上添加了折叠功能并修改了样式，java部分deepseek写的，目前电脑和平板上运行没发现问题，不保证不出问题\n1\u0026lt;style\u0026gt; 2 .highlight { 3 /* 你可以根据需要调整这个高度 */ 4 max-height: 400px; 5 overflow: hidden; 6 } 7 8 .code-show { 9 max-height: none !important; 10 } 11 12 .code-more-box { 13 width: 100%; 14 padding-top: 78px; 15 background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(var(--card-background))); 16 position: absolute; 17 left: 0; 18 right: 0; 19 bottom: 0; 20 z-index: 1; 21 } 22 23 .code-more-btn, .code-less-btn { 24 display: block; 25 margin: auto; 26 width: 100%; 27 height: 78px; 28 background: none; 29 } 30 31 .code-less-btn { 32 position: absolute; 33 bottom: 0px; 34 left: 0px; 35 } 36 37 .code-more-img, .code-less-img{ 38 display: block; 39 margin: auto; 40 padding-right: 1rem; 41 width: 60px; 42 position: absolute; 43 right: 2.5rem; 44 bottom: 30px; 45 } 46 47 .code-less-img { 48 bottom: 25px !important; 49 } 50\u0026lt;/style\u0026gt; 51 52\u0026lt;!-- deepseek：代码折叠展开 --\u0026gt; 53\u0026lt;script\u0026gt; 54 function initCodeMoreBox() { 55 // 新增代码开始 56 // 检测是否为移动端 57 const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent); 58 59 if (isMobile) { 60 // 移动端直接移除所有高度限制 61 document.querySelectorAll(\u0026#39;.highlight\u0026#39;).forEach(block =\u0026gt; { 62 block.style.maxHeight = \u0026#39;none\u0026#39;; 63 block.style.overflow = \u0026#39;auto\u0026#39;; 64 }); 65 return; 66 } 67 // 新增代码结束 68 69 let codeBlocks = document.querySelectorAll(\u0026#34;.highlight\u0026#34;); 70 if (!codeBlocks || codeBlocks.length === 0) { 71 return; 72 } 73 74 codeBlocks.forEach(codeBlock =\u0026gt; { 75 // 校验是否overflow 76 if (codeBlock.scrollHeight \u0026lt;= codeBlock.clientHeight) { 77 return; 78 } 79 80 // 保存初始位置 81 const originalPosition = codeBlock.getBoundingClientRect().top + window.pageYOffset; 82 83 // 创建 code-more-box 84 let codeMoreBox = document.createElement(\u0026#39;div\u0026#39;); 85 codeMoreBox.classList.add(\u0026#39;code-more-box\u0026#39;); 86 87 // 创建 code-more-btn 88 let codeMoreBtn = document.createElement(\u0026#39;span\u0026#39;); 89 codeMoreBtn.classList.add(\u0026#39;code-more-btn\u0026#39;); 90 91 // 创建 code-more-img 92 let moreImg = document.createElement(\u0026#39;img\u0026#39;); 93 moreImg.classList.add(\u0026#39;code-more-img\u0026#39;); 94 moreImg.src = {{ (resources.Get \u0026#34;icons/bottom.svg\u0026#34;).Permalink }}; 95 96 // 组装更多按钮 97 codeMoreBtn.appendChild(moreImg); 98 codeMoreBox.appendChild(codeMoreBtn); 99 codeBlock.appendChild(codeMoreBox); 100 101 // 点击更多按钮事件 102 codeMoreBox.addEventListener(\u0026#39;click\u0026#39;, function() { 103 // 隐藏更多按钮 104 codeMoreBox.style.display = \u0026#39;none\u0026#39;; 105 106 // 展开代码块 107 codeBlock.classList.add(\u0026#39;code-show\u0026#39;); 108 109 // 创建折叠按钮 110 let codeLessBox = document.createElement(\u0026#39;div\u0026#39;); 111 codeLessBox.classList.add(\u0026#39;code-less-box\u0026#39;); 112 113 let codeLessBtn = document.createElement(\u0026#39;span\u0026#39;); 114 codeLessBtn.classList.add(\u0026#39;code-less-btn\u0026#39;); 115 116 let lessImg = document.createElement(\u0026#39;img\u0026#39;); 117 lessImg.classList.add(\u0026#39;code-less-img\u0026#39;); 118 lessImg.src = {{ (resources.Get \u0026#34;icons/top-pre.svg\u0026#34;).Permalink }}; 119 120 // 组装折叠按钮 121 codeLessBtn.appendChild(lessImg); 122 codeLessBox.appendChild(codeLessBtn); 123 codeBlock.appendChild(codeLessBox); 124 125 // 点击折叠按钮事件 126 codeLessBox.addEventListener(\u0026#39;click\u0026#39;, function() { 127 // 移除折叠按钮 128 codeLessBox.remove(); 129 130 // 隐藏展开状态 131 codeBlock.classList.remove(\u0026#39;code-show\u0026#39;); 132 133 // 显示更多按钮 134 codeMoreBox.style.display = \u0026#39;block\u0026#39;; 135 136 // 只在初始位置不在视口内时才滚动 137 scrollToInitialPositionIfNeeded(originalPosition, codeBlock); 138 139 // 触发resize事件 140 window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)); 141 }); 142 143 // 触发resize事件 144 window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)); 145 }); 146 }); 147} 148 149 function scrollToInitialPositionIfNeeded(originalPosition, codeBlock) { 150 // 获取当前视口信息 151 const viewportHeight = window.innerHeight; 152 const currentScroll = window.pageYOffset; 153 154 // 计算初始位置是否在视口内 155 const isOriginalPositionInViewport = 156 originalPosition \u0026gt;= currentScroll \u0026amp;\u0026amp; 157 originalPosition \u0026lt;= currentScroll + viewportHeight; 158 159 // 计算代码块当前是否在视口内 160 const codeBlockRect = codeBlock.getBoundingClientRect(); 161 const isCodeBlockInViewport = 162 codeBlockRect.top \u0026gt;= 0 \u0026amp;\u0026amp; 163 codeBlockRect.top \u0026lt;= viewportHeight; 164 165 // 只有当初始位置不在视口内，且代码块也不在视口内时才滚动 166 if (!isOriginalPositionInViewport \u0026amp;\u0026amp; !isCodeBlockInViewport) { 167 const header = document.querySelector(\u0026#39;header\u0026#39;); 168 let headerOffset = 0; 169 170 if (header) { 171 const headerHeight = window.getComputedStyle(header).getPropertyValue(\u0026#39;height\u0026#39;); 172 headerOffset = parseInt(headerHeight.replace(\u0026#39;px\u0026#39;, \u0026#39;\u0026#39;)) || 0; 173 } 174 175 // 计算最终滚动位置（考虑header高度和一点边距） 176 const targetPosition = originalPosition - headerOffset - 20; 177 178 window.scrollTo({ 179 top: targetPosition, 180 behavior: \u0026#39;smooth\u0026#39; 181 }); 182 183 console.log(\u0026#39;触发滚动：初始位置不在视口内\u0026#39;); 184 } else { 185 console.log(\u0026#39;不触发滚动：初始位置或代码块在视口内\u0026#39;); 186 } 187 } 188 189 // 初始化 190 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 191 initCodeMoreBox(); 192 }); 193\u0026lt;/script\u0026gt;\r用上述代码手机端会有不显示折叠展开功能相关按钮和样式的问题，用了比较极端的方法解决，即限制手机端禁用这个功能，改用限制代码块高度+滑动查看\n1/* 移动端禁用折叠，启用滚动并限制高度 */ 2@media (max-width: 768px) { 3 .highlight { 4 overflow: auto !important; 5 pre { 6 max-height: 17em !important; 7 \u0026amp;::-webkit-scrollbar { 8 display: flex; 9 } 10 } 11 } 12 13 .code-more-box, 14 .code-less-box { 15 display: none !important; 16 } 17}\r此外如果自定义了鼠标光标样式，也要记得改，\n我自定义鼠标光标样式的代码抄的莱特雷 由于添加的img属于.article-content这个类，要记得排除\n1// 【Stack主题鼠标样式写法】 2// default光标图片 3body, 4html, 5.article-content img:not(.code-less-img):not(.code-more-img), // 这里 6.waline-container, 7.wl-header label { 8 cursor: url(../mouse/default.png), 9 auto !important; 10} 11 12// pointer光标图片 13a:hover, 14button:hover, 15.copyCodeButton:hover, 16#dark-mode-toggle, 17.wl-actions label, 18.wl-actions a, 19.wl-emoji-popup .wl-tab-wrapper button, 20.wl-gif-popup img, 21.wl-sort li, 22.code-more-img, // 这里 23.code-less-img { // 这里 24 cursor: url(../mouse/pointer.png), 25 auto !important; 26}\r代码块显示标题 参考loyayz：Hugo 代码块显示标题 用ai改了一下，少创建一个类，自己写了css\n1{{- $lang := .Type | default \u0026#34;text\u0026#34; }} 2{{- $title := .Attributes.title | default \u0026#34;\u0026#34; -}} 3 4{{- if $title }} 5\u0026lt;div class=\u0026#34;highlight-with-title\u0026#34; data-title=\u0026#34;{{ $title }}\u0026#34;\u0026gt; 6 {{- end }} 7 8 {{ highlight .Inner $lang .Options }} 9 10 {{- if $title }} 11\u0026lt;/div\u0026gt; 12{{- end }}\r1// 代码块标题样式 2.highlight-with-title { 3 position: relative; 4 margin: 1rem 0; 5 border-radius: 20px; 6 overflow: hidden; 7} 8.highlight-with-title .highlight { 9 padding-top: 4rem; 10} 11.highlight-with-title .copyCodeButton { 12 top: calc(var(--card-padding) + 1.5rem); 13} 14.highlight-with-title::before { 15 content: attr(data-title); 16 position: absolute; 17 left: 0; 18 right: 0; 19 color: var(--accent-color-text); 20 opacity: 0.5; 21 padding: 0 calc(2.5rem + 3em); 22 background-color: var(--accent-color); 23 font-size: 0.7em; 24 font-family: \u0026#39;Fira code\u0026#39;, \u0026#39;mkty\u0026#39;; 25 z-index: 1; 26}\r1```语法名 {title=\u0026#34;标题内容\u0026#34;} 2# code here\r其他样式更改 参照莱特雷的样式改了代码块圆角\n1// 代码块基础样式修改 2.highlight { 3 max-width: 100% !important; 4 border-radius: 20px; 5 margin: 0 !important; 6 \u0026amp;:hover { 7 box-shadow: var(--shadow-l1) !important; 8 } 9}\r禁用了滚动条\n1.article-content { 2 .highlight { 3 pre { 4 scrollbar-width: none; 5 /* Firefox */ 6 \u0026amp;::-webkit-scrollbar { 7 display: none; 8 /* Chrome Safari */ 9 } 10 } 11 } 12}\r复制按钮圆角\n1// 代码块复制按钮 2.article-content .copyCodeButton { 3 border-radius: 4px; 4}\r一些代码块相关注意事项 行号不跟代码一起滚动的问题 做代码块折叠的话用不到，但如果希望限制代码块高度滚动查看代码的话，要想让行号跟着代码块一起滚动，记得改项目根目录\\hugo.yaml（也可能是config.yaml 我记不清- -\n1markup: 2 highlight: 3 noClasses: false 4 codeFences: true 5 guessSyntax: true 6 lineNoStart: 1 7 lineNos: true 8 lineNumbersInTable: false 9 tabWidth: 4代码缩进长度不一致的问题 写博客的时候如果发现代码块里面缩进长度不一致的问题，可能是用了制表符Tab缩进导致的，解决办法：\n在VS Code里把缩进改成使用空格缩进，把默认tab长度改成和yaml文件里面写的tabWidth一致，我写的是4所以VS Code里我也改成4。这样改了之后按tab直接等于4个空格 1VS Code里按 Ctrl+, 打开设置 2搜索 \u0026#34;editor.insert spaces\u0026#34; 3勾选 \u0026#34;Editor: Insert Spaces\u0026#34; 4搜索 \u0026#34;editor.detect indentation\u0026#34; 5勾选 \u0026#34;Editor: Detect Indentation\u0026#34;（自动检测） 6或者设置 \u0026#34;Editor: Tab Size\u0026#34; 为 4 7搜索 \u0026#34;editor.format on paste\u0026#34; 8勾选 \u0026#34;Editor: Format On Paste\u0026#34;\r有时候遇到从别的文件粘贴过来的代码，粘贴到.md文件里还保留了制表符，需要全选并按Ctrl + K、Ctrl + F，可以把里面的制表符格式化成4个空格 注意你的.md文件里面所有缩进都得是4个空格（或者是你设置的其他数字）才能保持缩进长度一致，如果还是发现有不一致的问题就手动改一下 参考资料 莱特雷：【Hugo】Stack主题自定义修改 ； loyayz：Hugo 代码块显示标题 。 ","date":"2025-10-16T00:00:00Z","permalink":"https://ryihuan.github.io/p/hugo-stack%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E7%BE%8E%E5%8C%96/","title":"Hugo Stack主题代码块美化"},{"content":"学习目的 前两天跟着Godot官方入门教程把“你的第一个2D游戏”做出来了（帖子 ）\n虽然还是云里雾里，但我觉得我可以开始通过模仿别人开源的项目学习并制作一点别的小游戏（某种我觉得对的学习曲线）\n想做一个老虎机游戏 于是搜索到了YouTube@brwxddev写的这个教程 作者也把项目文件放在GitHub上了（链接 ）\n我的目的是最终在学习基础上做出一个5x5的老虎机游戏（类似弹丸V3里的那个），并且钱是会花完的（Game Over），赢的钱可以兑换物品（通往Ending？）\n学习中…… 不堪入目的试图看懂代码过程\r研究这个老虎机https://youtu.be/AcvvarHo5T8?si=IV7gAKmsuszX4gwE\n看reel.gd 原来脚本不用对应场景，哥们单独写了个signalbank脚本，里面放了开始roll和roll停止的信号，不过这个信号括号里的参数是怎么用的，增增哇嘎乃:bugcat_sweat: 1signal startRoll(slotID,duration) 2signal rollFinished(slotID,result) 然后在reel节点的脚本里ready函数就调用了开始roll的信号，遇到了没学过的名字就是这个callable\nreel1和reel2是代表白色和红色的卷轴，两个都会一起塞进一个滚筒里，有点不明白为什么要这么设计？这段代码应该是在说启动时的状态是显示红色卷轴，白色卷轴放到显示区域外？ 1func _ready(): 2 SigBank.startRoll.connect(Callable(self,\u0026#34;_startRoll\u0026#34;)) 3 reel1.position.y = -1000 4 reel2.position.y = 0 上次学到process函数是运行时每一帧都会刷新的函数（大意） 1func _process(delta): 2 if Input.is_action_just_released(\u0026#34;ui_accept\u0026#34;): 3 _startRoll(reelID,5) 4 print(\u0026#34;rollMe\u0026#34;) 5 6 match state: 7 ROLLBACK: 8 _roll(reel1,-MS) 9 _roll(reel2,-MS) 10 11 rollBackDuration -= delta 12 if rollBackDuration \u0026lt;= 0: 13 state = ROLL 14 ROLL: 15 _roll(reel1,MS) 16 _roll(reel2,MS) 17 18 rollDuration -= delta 19 if rollDuration \u0026lt;= 0: 20 state = STOP 21 _stopRoll() 22 STOP: 23 pass这么看起来SigBank.startRoll.connect(Callable(self,\u0026quot;_startRoll\u0026quot;))这行是定义了开始的roll信号？结合signal startRoll(slotID,duration)来看，_startRoll(reelID,5)的意思是开始rollreelID（整数），每个转轴的roll时间间隔5（单位是帧吗？）\n之前学过match可以给枚举的变量的值执行不同的代码，这里脚本顶部枚举了enum {ROLL,STOP,ROLLBACK}\n但是没能理解前面有下划线的这个是什么意思:bugcat_sweat:\n顶部也写了var state，但没看懂这里是什么意思……:zenzenwakannai:\n看了后面的代码 1func _startRoll(reelNumber,dur): 2 if reelNumber!= reelID : return 3 4 reel1.position.y = -1000 5 reel2.position.y = 0 6 state = ROLLBACK 7 rollDuration = dur 8 print(reelID,reelNumber,dur) 9 rollBackDuration = 0.25 10 11 12func _roll(slot:Sprite2D,MSpeed): 13 var newPOS2 = slot.position.y + MSpeed 14 if newPOS2 \u0026gt;= 1000: 15 newPOS2 =-1000 16 slot.position.y = newPOS2 17 18func _stopRoll(): 19 TWN = create_tween().set_trans(Tween.TRANS_SPRING).set_ease(Tween.EASE_OUT).set_parallel() 20 var rng = randi_range(0,9) 21 var dur = 1.5 22 23 var finalPos = -100*rng 24 25 var finalSlot 26 var anotherSlot 27 if reel1.position.y \u0026lt; reel2.position.y: 28 finalSlot = reel1 29 anotherSlot = reel2 30 else: 31 finalSlot = reel2 32 anotherSlot = reel1 33 34 finalSlot.z_index = 1 35 anotherSlot.z_index = 0 36 TWN.tween_property(finalSlot,\u0026#34;position:y\u0026#34;,finalPos,dur) 37 TWN.tween_property(anotherSlot,\u0026#34;position:y\u0026#34;,finalPos+1000,dur) 38 await TWN.finished 39 print(\u0026#34;Reeel ID\u0026#34;,reelID,\u0026#34; reel Image \u0026#34;, finalSlot.name ,\u0026#34; POS : \u0026#34;,finalPos, \u0026#34; RNJESUS :\u0026#34;,rng) 40 SigBank.rollFinished.emit(reelID,rng)好像有点明了了，前面match的里面调用的是这里的函数\n看一下_startRoll\n没看懂，应该是在定义转轴初始状态？？\n看一下_roll\n好像是在说如果图片往下转到屏幕下方显示区域外面，就把它刷新到屏幕上方显示区域外面（确保可持续\n看一下_stopRoll\n有必要去查一下tween的定义……这一行没看懂\n这个rng应该是指显示的图样0-9\nfinalSlot取y值更小的卷轴？没看懂 不是有可能在屏幕外面吗:bugcat_sweat:还是说有部分代码确保最终显示的卷轴是在屏幕内且在另一个卷轴上方的\ntween相关的看不懂\n最后传回了一个roll结束的信号\n看slot_machine_ui.gd 这是一个用户界面节点（？）包括三个滚轴和spin按钮 bet按钮 结果显示\n1.顶部\n1var reelResult1 2var reelResult2 3var reelResult3 4 5var receivedHowManyTimes = 0 6 7var betValue 8var betResult 9var winningMultiplier = 0 ready函数看起来是启动时接收roll结束的信号并收集数据？ 1func _ready(): 2 3 SigBank.rollFinished.connect(Callable(self,\u0026#34;_receiveNumber\u0026#34;)) 4 pass # Replace with function body. 上面信号里用到了这个函数 1func _receiveNumber(reelID,rngResult): 2 receivedHowManyTimes +=1 3 match reelID: 4 1: 5 reelResult1 = rngResult 6 2: 7 reelResult2 = rngResult 8 3: 9 reelResult3 = rngResult 10 if receivedHowManyTimes \u0026lt;3: 11 print(receivedHowManyTimes) 12 13 else: 14 receivedHowManyTimes = 0 15 _calculateWinning()应该是在说收集三个滚轴的结果，并只收集三次\n4. 上面的函数最后一行用到了这个函数\n1func _calculateWinning(): 2 betValue = int($betAmount.value) 3 4 5 if reelResult1 == reelResult2 || reelResult2 == reelResult3: 6 winningMultiplier = 5 7 elif reelResult1 == reelResult2 \u0026amp;\u0026amp; reelResult2 == reelResult3: 8 winningMultiplier = 100 9 else : 10 winningMultiplier = -1 11 betResult = betValue * winningMultiplier 12 if betResult\u0026gt;0: 13 $Result.text = \u0026#34;+ \u0026#34;+str(betResult) 14 else: 15 $Result.text = \u0026#34;LMAO !!!! \u0026#34;+str(betResult)这里定义了结果赢不赢钱\n如果三个卷轴中有两个一样就赢5倍\n三个结果都一样赢100倍\n否则扣除下注的钱\n（嗯？这个意思是，赢钱的情况不会扣下注的钱？）\n如果赢钱，结果标签显示“+数字”，没有的话就嘲笑\n5. 最后一个函数\n1func _on_spin_button_button_up(): 2 SigBank.startRoll.emit(1,2) 3 SigBank.startRoll.emit(2,2.5) 4 SigBank.startRoll.emit(3,3) 5 pass # Replace with function body.这个应该传的是系统带的按钮抬起的信号\nemit是什么意思（\n括号内的参数左边是reelID，右边是duration（这个duration到底是指哪里的间隔\n查资料补充知识中\r信号 emit emit：释放信号\nsignal_name.emit()\n因此：\n1func _on_spin_button_button_up(): 2 SigBank.startRoll.emit(1,2) 3 SigBank.startRoll.emit(2,2.5) 4 SigBank.startRoll.emit(3,3) 5 pass # Replace with function body.的意思是当接收到spin按钮抬起信号时，释放Sigbank.gd脚本中的startRoll信号，参数为(slotID, duration)，即第一个滚轴开始滚动持续时间为2，第二个滚轴开始滚动持续时间为2.5，第三个滚轴开始滚动持续时间为3\n问了AI如何理解这里的duration单位是帧还是秒：\n有小数，所以不会是帧 有信号接收方要求duration的单位是秒（找了一下，应该是_startroll调用了startRoll信号，而func _process(delta):调用了_startroll，因此单位是秒） *学不完了明天学*","date":"2025-10-13T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E5%AD%A6%E4%B9%A0youtube@brwxddev%E5%86%99%E7%9A%84godot%E9%A1%B9%E7%9B%AEslot-machine/","title":"学习YouTube@brwxddev写的Godot项目（Slot Machine）"},{"content":"根据Godot官方入门指引按图索骥做的小游戏，只是把美术资源更换成自己画的图片了。\n成品展示 操作环境：电脑网页，不支持移动端\n操作方式：\n控制移动：WASD / ↑←↓→ 开始游戏快捷键：Enter 游戏目标：操作艾克赛德躲避幻梦。\n如果网页加载缓慢或遇到问题可以用夸克网盘 制作过程与感想 步骤参见Godot简体中文文档-你的第一个2D游戏 从零学习做游戏中，学完GD Script还是对于怎么做游戏一头雾水，于是决定从官方文档指引的入门游戏开始做。\n过程上只要按图索骥就好了，偶有报错也是因为代码打错了这种小问题\n做完之后感觉，确实只是一个入门教程，只能说是起到了给零基础的新人开发者展示游戏制作过程的效果，对于代码为什么要这么写、节点为什么要这样设置，还是只能有一个朦胧的概念而无法确切理解\n不过这个小游戏还挺有意思，有意思就有意思在制作过程中可以把Godot提供的素材替换成自己画的素材……\n如果有感兴趣的朋友可以下载一个Godot直接对着教程上手，官方教程中完整给出了需要用到的代码。\n如何导出Godot网页游戏并通过Hugo部署到博客页面 我先是找了一下怎么在网页游玩Godot网页游戏的教程，看到有用Vercel部署的，也有用Netflix等的，前者比较熟悉但Vercel.app域名大陆访问不了，后者没接触过\n问了下AI原来可以直接用iframe嵌入博客文章里，那对我来说这是最好的方式了\n创建项目时渲染器选择兼容，也可以在创建项目之后在项目设置里把渲染方法改为gl_compatibility 导出时选择Web（如果没有下载过导出模板，推荐先去官网下载 ，下载Export templates，如果用C++就下载.NET版 在导出路径里把文件名写成index.html 把导出的项目文件夹放在你的博客根目录/static/games/路径下 在.md文件正文使用\u0026lt;iframe src=\u0026quot;/games/你的游戏项目文件夹/index.html\u0026quot; style=\u0026quot;width:100%; height:80vh;\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;，从而在文章中嵌入游戏 ","date":"2025-10-12T00:00:00Z","image":"https://ryihuan.github.io/p/first2dgame.png","permalink":"https://ryihuan.github.io/p/%E7%AC%AC%E4%B8%80%E4%B8%AA2d%E6%B8%B8%E6%88%8F/","title":"第一个2D游戏"},{"content":"本文基于Hugo版本0.150.0，Stack版本3.31.0，部分代码使用AI完成\n从Neopost到Stack 我觉得对于像我这样的代码白痴，一开始装修博客就去选冷门主题真的是走弯路了。用Neopost主题的时候遇到很多问题用搜索引擎都搜不到可以抄作业的答案，只能一个劲问ai然后一遍一遍试错……\n虽然看到博客一点一点有个样子了也比较有满足感，但是太折磨了，思来想去还是换了更多人用教程也更全的Stack主题。\n在此感谢：\n莱特雷-Hugo Stack主题自定义更改 ；\n树响集-Stack主题调整 ；\n第三夏尔-Hugo Stack博客主题装修 ；\nNaive Koala-Hugo Stack 魔改美化 ;\nB1ain\u0026rsquo;s Blog-hugo博客装修笔记 ;\n失迹的博客-建站技术 | 使博客更好地接入 Waline 顺便截图纪念一下用Neopost主题时候的样子吧。展开图片 从默认字体到猫啃糖圆 没啥好说的，星屑同款字体，圆体的神,\n附上字体网站链接 背景图和头像 因为还是很喜欢原来做的像素动图风格，本打算沿用，但在Pintrest找了一晚上素材都没有找到很满意的背景图\n自己画了一下草图，先凑合用着吧（画不画完还是未知数）\n画不来像素风所以整个风格都改了\u0026gt; \u0026lt; 画布开得尽可能大了，姑且应用到网页上看看会多么影响加载速度（\n切换与旋转效果 按照教程 添加了头像旋转效果，并加了浅色/暗色模式切换头像和背景图的功能，效果不错（就是图太草了）\n以下是我魔改的代码：\n暗色模式下头像旋转（主题目录\\assets\\scss\\custom.scss）\r1// 头像旋转动画 2[data-scheme=\u0026#34;dark\u0026#34;] .sidebar header .site-avatar .site-logo { 3 transition: transform 1.65s ease-in-out; // 旋转时间 4} 5 6[data-scheme=\u0026#34;dark\u0026#34;] .sidebar header .site-avatar .site-logo:hover { 7 transform: rotate(360deg); // 旋转角度为360度 8}\r切换背景图片（主题目录\\layouts\\partials\\footer\\custom.html）\r1 /*修改背景图片*/ 2 [data-scheme=\u0026#34;light\u0026#34;] body { 3 background: url({{ (resources.Get \u0026#34;background/light.jpg\u0026#34;).Permalink }}) no-repeat center top; 4 background-size: cover; 5 background-attachment: fixed; 6 } 7 [data-scheme=\u0026#34;dark\u0026#34;] body { 8 background: url({{ (resources.Get \u0026#34;background/dark.jpg\u0026#34;).Permalink }}) no-repeat center top; 9 background-size: cover; 10 background-attachment: fixed; 11 }\r切换头像\r先修改主题目录\\layouts\\partials\\head\\custom.html\n1\u0026lt;script\u0026gt; 2// 头像切换功能 3function updateAvatar() { 4 const avatarImg = document.querySelector(\u0026#39;.site-avatar .site-logo\u0026#39;); 5 if (!avatarImg) return; 6 7 const isDark = document.documentElement.getAttribute(\u0026#39;data-scheme\u0026#39;) === \u0026#39;dark\u0026#39;; 8 const lightSrc = avatarImg.getAttribute(\u0026#39;data-src-light\u0026#39;) || avatarImg.src; 9 const darkSrc = avatarImg.getAttribute(\u0026#39;data-src-dark\u0026#39;); 10 11 if (darkSrc \u0026amp;\u0026amp; isDark) { 12 avatarImg.src = darkSrc; 13 } else if (lightSrc \u0026amp;\u0026amp; !isDark) { 14 avatarImg.src = lightSrc; 15 } 16} 17 18// 初始化 19document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, updateAvatar); 20 21// 监听主题切换 22new MutationObserver(function(mutations) { 23 mutations.forEach(function(mutation) { 24 if (mutation.attributeName === \u0026#39;data-scheme\u0026#39;) { 25 setTimeout(updateAvatar, 50); 26 } 27 }); 28}).observe(document.documentElement, { attributes: true }); 29\u0026lt;/script\u0026gt;再修改主题目录\\layouts\\partials\\sidebar\\left.html（在\u0026lt;header\u0026gt;后修改，注释掉原有设置）\n1\u0026lt;header\u0026gt; 2 {{ with .Site.Params.sidebar.avatar }} 3 {{ if (default true .enabled) }} 4 \u0026lt;figure class=\u0026#34;site-avatar\u0026#34;\u0026gt; 5 \u0026lt;a href=\u0026#34;{{ .Site.BaseURL | relLangURL }}\u0026#34;\u0026gt; 6 {{ if not .local }} 7 \u0026lt;img src=\u0026#34;{{ .src }}\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;300\u0026#34; class=\u0026#34;site-logo\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Avatar\u0026#34; 8 {{ with .srcDark }}data-src-dark=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; 9 {{ else }} 10 {{ $avatar := resources.Get (.src) }} 11 {{ $avatarDark := resources.Get (.srcDark | default .src) }} 12 13 {{ if and $avatar $avatarDark }} 14 {{ $avatarResized := $avatar.Resize \u0026#34;300x\u0026#34; }} 15 {{ $avatarDarkResized := $avatarDark.Resize \u0026#34;300x\u0026#34; }} 16 \u0026lt;img src=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; 17 data-src-light=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; 18 data-src-dark=\u0026#34;{{ $avatarDarkResized.RelPermalink }}\u0026#34; 19 width=\u0026#34;{{ $avatarResized.Width }}\u0026#34; 20 height=\u0026#34;{{ $avatarResized.Height }}\u0026#34; 21 class=\u0026#34;site-logo\u0026#34; 22 loading=\u0026#34;lazy\u0026#34; 23 alt=\u0026#34;Avatar\u0026#34;\u0026gt; 24 {{ else if $avatar }} 25 {{ $avatarResized := $avatar.Resize \u0026#34;300x\u0026#34; }} 26 \u0026lt;img src=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; 27 width=\u0026#34;{{ $avatarResized.Width }}\u0026#34; 28 height=\u0026#34;{{ $avatarResized.Height }}\u0026#34; 29 class=\u0026#34;site-logo\u0026#34; 30 loading=\u0026#34;lazy\u0026#34; 31 alt=\u0026#34;Avatar\u0026#34;\u0026gt; 32 {{ else }} 33 {{ errorf \u0026#34;Failed loading avatar from %q\u0026#34; . }} 34 {{ end }} 35 {{ end }} 36 \u0026lt;/a\u0026gt; 37 {{ with $.Site.Params.sidebar.emoji }} 38 \u0026lt;span class=\u0026#34;emoji\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; 39 {{ end }} 40 \u0026lt;/figure\u0026gt; 41 {{ end }} 42 {{ end }}再在hugo.yaml的sidebar里面添加srcdark: img/dark.jpg\n1 sidebar: 2 emoji: 😨 3 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. 4 avatar: 5 enabled: true 6 local: true 7 src: img/light.jpg 8 srcdark: img/dark.jpg\r顺说目前的回顶部按钮和鼠标光标是用neopost主题的时候自己画的，我很满意^ ^\n不过考虑到风格不匹配大概还要重画一个……\n更换头像下图标链接 苦于没找到合适的图标素材，自己摸索了一个可以制作出完美适配主题下其他现有图标的办法\n先看我做好的图标： （这样看起来两个线条粗细不太一致，我也没找到原因，但没关系，最终显示效果是差不多的就行……如果有谁知道为什么，请务必告诉我）\n如果有同款需要，可以直接右键上面的图标另存^ ^\n寻找svg素材 这里有一个很全的资源网站：维基共享资源 搜索你需要的logo，比如“bluesky”，选择图像-文件类型-svg，选择合适的logo并在下载时选择full resolution，这样我们就能得到一张初始的svg文件：\n展开图像\r编辑svg文件 使用编辑工具对svg文件进行编辑，这里我用的是一个免费的在线svg编辑工具（需要注册） 主要需要做的是先把view box调到24x24像素，再把图像调整到view box范围内，四周适当留出2px左右的空白（视具体图像而定），之后就可以保存了\n展开图像 把保存的svg文件在VScode里打开，默认会显示图像预览，需要在右上角找到作为源文本重新打开按钮，查看源文本\n为了跟主题原有的图标协调，这里我同时打开了主题目录\\assets\\icons\\brand-twitter.svg的源文本进行比对：\nbrand-twitter.svg\r1\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon icon-tabler icon-tabler-brand-twitter\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke=\u0026#34;currentColor\u0026#34; fill=\u0026#34;none\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; 2 \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; 3 \u0026lt;path d=\u0026#34;M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z\u0026#34; /\u0026gt; 4\u0026lt;/svg\u0026gt;\r可以直接复制前面两行代码粘贴到正在修改的svg文件中：\n未编辑的svg文件源文本\r1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; 2\u0026lt;svg width=\u0026#34;24px\u0026#34; height=\u0026#34;24px\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; 3 \u0026lt;path d=\u0026#34;M 6.307 4.451 C 8.615 6.202 11.099 9.759 12.012 11.668 C 12.923 9.76 15.407 6.202 17.717 4.451 C 19.383 3.185 22.083 2.207 22.083 5.321 C 22.083 5.944 21.73 10.549 21.524 11.294 C 20.804 13.893 18.184 14.557 15.854 14.155 C 19.928 14.858 20.964 17.179 18.726 19.501 C 14.477 23.912 12.618 18.395 12.14 16.981 C 12.054 16.722 12.012 16.6 12.012 16.703 C 12.012 16.6 11.97 16.722 11.882 16.981 C 11.407 18.395 9.547 23.912 5.297 19.501 C 3.059 17.179 4.095 14.858 8.17 14.155 C 5.837 14.557 3.219 13.893 2.499 11.294 C 2.294 10.549 1.94 5.944 1.94 5.321 C 1.94 2.207 4.64 3.185 6.307 4.451 Z\u0026#34; style=\u0026#34;transform-box: fill-box; transform-origin: 50% 50%;\u0026#34; fill=\u0026#34;#000\u0026#34;/\u0026gt; 4\u0026lt;/svg\u0026gt;\r注意删除正在修改的文件\u0026lt;path\u0026gt;末尾的样式（如style=\u0026quot;\u0026quot;、fill=\u0026quot;\u0026quot;、stroke=\u0026quot;\u0026quot;等等，总之只保留前面一连串看不懂的数字）\n编辑后的源文本\r1\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon icon-tabler icon-tabler-brand-bluesky\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke=\u0026#34;currentColor\u0026#34; fill=\u0026#34;none\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; 2 \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; 3 \u0026lt;path d=\u0026#34;M 6.307 4.451 C 8.615 6.202 11.099 9.759 12.012 11.668 C 12.923 9.76 15.407 6.202 17.717 4.451 C 19.383 3.185 22.083 2.207 22.083 5.321 C 22.083 5.944 21.73 10.549 21.524 11.294 C 20.804 13.893 18.184 14.557 15.854 14.155 C 19.928 14.858 20.964 17.179 18.726 19.501 C 14.477 23.912 12.618 18.395 12.14 16.981 C 12.054 16.722 12.012 16.6 12.012 16.703 C 12.012 16.6 11.97 16.722 11.882 16.981 C 11.407 18.395 9.547 23.912 5.297 19.501 C 3.059 17.179 4.095 14.858 8.17 14.155 C 5.837 14.557 3.219 13.893 2.499 11.294 C 2.294 10.549 1.94 5.944 1.94 5.321 C 1.94 2.207 4.64 3.185 6.307 4.451 Z\u0026#34; style=\u0026#34;transform-box: fill-box; transform-origin: 50% 50%;\u0026#34; /\u0026gt; 4\u0026lt;/svg\u0026gt;\r这样一个适配主题的svg图标就做好了。\n应用到主页 把做好的文件放到主题目录\\assets\\icons\\中，并在hugo.yaml（也可能叫config.yaml，我不记得我改过名字吗）里修改menu-social-icon的设置（与文件的标题一致），这样就可以应用到博客页面上了\n如果需要更改图标链接的顺序，在params:前面一行添加weight: 数字即可，数字越小则越前\n添加文章封面渐变效果 参考了田八-使用CSS让图片透明渐变 中第三种方法的代码。\n效果预览\r将以下代码添加到custom.scss中即可：\n1//文章预览图渐变 2.article-image { 3 img { 4 mask: linear-gradient(to bottom, black 0%, black 25%, rgba(0, 0, 0, 0.8) 40%, rgba(0, 0, 0, 0.4) 70%, transparent 100%); } 5}为元素添加鼠标悬停效果 代码是什么，可以吃吗？ 先说题外话， 装修过程中渐渐学会了用开发者工具、定位css文件中的元素位置、简单修改悬停效果和添加动画……这之前我真是一窍不通\n我是小白，所以把这个过程分享出来，希望能帮助到跟我小白程度一样的人吧。\n我一开始还是各种问ai，但ai给出的方案实际上也是它海量检索资料然后缝合的，如果提问的方式不正确，它很难给出跟实际情况适配的答案。\n遇到问题时还是先谷歌搜寻一下，比如我想要上面提到的文章封面渐变效果，先用搜索引擎搜索“CSS 图片渐变”，找到了别人分享的实际内容，再去问ai是否可以应用到我的案例上、如果我需要为透明度添加中间值应该怎么做。这样可以提升效率，而不是在ai给出的海量错误代码中迷失。\n学会使用开发者工具检查元素，查看元素的属性。\n用vscode的资源管理器打开主题文件夹，再在style.scss给出的文件列表里一个一个ctrl+F查找该属性，这样就能很快锁定这个元素的样式代码。\n通常建议不要直接在原文件上进行修改，应该在custom.scss中添加代码。\n在样式栏中，你也可以很快查找到该元素的某个属性是由哪个选择器定义的，可以直接复制该选择器的名字到css文件中对具体属性进行更改。点击:hov键可以强制设置元素状态，查看该状态下的属性。\n为常用颜色、阴影等参数创建变量\n在主题文件夹\\assets\\scss\\variables.scss中，可以看到主题设置的全部变量，我们也可以设置自己的变量以简便修改主题样式的过程。\n比如我的主题需要用到很多红色，我设置了:root {--light-red: #e85b56;}，这样我就可以使用var(--light-red)来调取这个值，而不用每次都输入具体的值。\n案例：左侧菜单栏悬停效果 以下是实现左侧菜单栏悬停效果的具体案例：\n用F12定位元素属性\n选择左侧菜单栏中的元素，可以很清楚地看到class=\u0026quot;menu\u0026quot; id=\u0026quot;main-menu\u0026quot;\n查找元素的样式代码\n可以在menu.scss中找到#main-menu关键词，以下是它相关的所有样式代码\n1/* Menu style */ 2#main-menu { 3 list-style: none; 4 overflow-y: auto; 5 flex-grow: 1; 6 font-size: 1.4rem; 7 background-color: var(--card-background); 8 9 box-shadow: var(--shadow-l1); 10 display: none; 11 margin: 0 calc(var(--container-padding) * -1); 12 13 padding: 30px 30px; 14 15 @include respond(xl) { 16 padding: 15px 0; 17 } 18 19 \u0026amp;, .menu-bottom-section ol { 20 flex-direction: column; 21 gap: 30px; 22 23 @include respond(xl) { 24 gap: 25px; 25 } 26 } 27 28 \u0026amp;.show { 29 display: flex; 30 } 31 32 @include respond(md) { 33 align-items: flex-end; 34 display: flex; 35 background-color: transparent; 36 padding: 0; 37 box-shadow: none; 38 margin: 0; 39 } 40 41 li { 42 position: relative; 43 vertical-align: middle; 44 padding: 0; 45 46 @include respond(md) { 47 width: 100%; 48 } 49 50 svg { 51 stroke: currentColor; 52 stroke-width: 1.33; 53 width: 20px; 54 height: 20px; 55 } 56 57 a { 58 height: 100%; 59 display: inline-flex; 60 align-items: center; 61 color: var(--body-text-color); 62 gap: var(--menu-icon-separation); 63 } 64 65 span { 66 flex: 1; 67 } 68 69 \u0026amp;.current { 70 a { 71 color: var(--accent-color); 72 font-weight: bold; 73 } 74 } 75 76 \u0026amp;.menu-bottom-section { 77 margin-top: auto; 78 79 ol { 80 display: flex; 81 padding-left: 0; 82 } 83 } 84 } 85} 在custom.scss中添加样式\n这是我为实现左侧菜单栏悬停后变色并加粗放大和添加阴影效果（并做暗色模式区分）而写的代码： 1#main-menu { //左边菜单 2 li { 3 \u0026amp;:hover a{ 4 transition: all 0.2s ease-in-out; 5 color: var(--light-red); 6 transform: scale(1.05); 7 font-weight: bold; 8 filter: drop-shadow(var(--dropshadow-light)); 9 } 10 11 [data-scheme=\u0026#34;dark\u0026#34;] \u0026amp; { 12 \u0026amp;:hover { 13 filter: drop-shadow(var(--dropshadow-dark)); 14 } 15 } 16 } 17}对于像我这样的小白来说，写悬停效果只需要学会写:hover（悬停状态）、transition（动画效果）、transform（变形）这些很简单的代码，并学会看原样式代码的层级结构就可以了。\n如果写的代码效果与预期不一致，或者报错，此时再把已经写好的代码和原本的样式代码贴给ai让它进行修改，比什么都不做就茫然地向ai求助更有效率。\n我为我的博客写了一大堆悬停效果，因为它最简单也最容易提升博客阅读体验。（当然，移动端看不了鼠标悬停效果= = 全部的代码就不放出了，总之基本上都是重复上述案例的步骤，不同的元素根据它原有样式的不同可能会有差分\n如果需要实现复杂的功能效果，可能需要编辑layouts/partials/footer/custom.html这个文件，这就涉及我知识盲区了\u0026gt; \u0026lt; 页码栏鼠标悬停效果 因为有点复杂，java部分借助了ai\n效果预览： 这个效果拆分为：\n当前页码高亮（stack自带） 鼠标悬停在非当前页码时高亮（会写上面的代码就会写这个），同时当前页码变回默认样式 鼠标悬停在当前页码时不发生改变 实现这一效果的代码：\n编辑custom.scss 1.page-link { //页面页码栏（需要添加JavaScript代码实现当前页高亮） 2 transition: all 0.2s ease-in-out; 3 4 \u0026amp;.current.reset-style { 5 font-weight: normal; 6 background-color: var(--card-background); 7 color: var(--card-text-color-secondary); 8 } 9 \u0026amp;:not(.current):hover { // 其他页面的悬停效果 10 color: var(--light-red); 11 background-color: var(--card-background-selected); 12 transform: scale(1.05); 13 font-weight: bold; 14 } 15} 编辑custom.html 1\u0026lt;script\u0026gt; 2/* 页码栏分页悬停效果 */ 3document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 4 const pagination = document.querySelector(\u0026#39;.pagination\u0026#39;); 5 const pageLinks = document.querySelectorAll(\u0026#39;.page-link\u0026#39;); 6 let currentPage = document.querySelector(\u0026#39;.page-link.current\u0026#39;); 7 8 pageLinks.forEach(link =\u0026gt; { 9 link.addEventListener(\u0026#39;mouseenter\u0026#39;, function() { 10 // 如果悬停的不是当前页面 11 if (!this.classList.contains(\u0026#39;current\u0026#39;) \u0026amp;\u0026amp; currentPage) { 12 currentPage.classList.add(\u0026#39;reset-style\u0026#39;); 13 } 14 }); 15 16 link.addEventListener(\u0026#39;mouseleave\u0026#39;, function() { 17 // 恢复当前页面样式 18 if (currentPage) { 19 currentPage.classList.remove(\u0026#39;reset-style\u0026#39;); 20 } 21 }); 22 }); 23}); 24\u0026lt;/script\u0026gt;更改主页文章卡片可点击区域 Stack主题中，主页的文章卡片的默认点击区域只有文章标题区域，\n以下这些代码可以把点击打开文章的区域更改为除分类标签以外的所有区域。\n在custom.html中添加：\n1\u0026lt;!-- 扩大主页文章卡片可点击区域 --\u0026gt; 2\u0026lt;script\u0026gt; 3document.addEventListener(\u0026#39;click\u0026#39;, function(e) { 4 const articleDetails = e.target.closest(\u0026#39;.article-details\u0026#39;); 5 if (articleDetails \u0026amp;\u0026amp; !e.target.closest(\u0026#39;.article-category a\u0026#39;)) { 6 const titleLink = articleDetails.querySelector(\u0026#39;.article-title a\u0026#39;); 7 if (titleLink) { 8 window.location.href = titleLink.href; 9 } 10 } 11}); 12\u0026lt;/script\u0026gt;在custom.scss中添加：\n1//扩大主页文章卡片可点击区域(java)，同步更改鼠标光标样式 2.article-details { 3 cursor: url(\u0026#39;/mouse/pointer.png\u0026#39;), pointer; 4}如果没有自定义鼠标样式，去掉url的部分就好了。\n配置Waline评论区 初步上手 Waline的官方文档有详细的配置教程。Waline-快速上手 完成HTML引入后，在根目录下的配置文件hugo.yaml（也可能是config.yaml？）中修改参数：\n1params: 2 comments: # 默认在第39行 3 enabled: true 4 provider: waline 5 6 waline: #默认在第75行 7 serverURL: # 填写你的评论区网址，如：serverURL: https://xxxx.vercel.app/ 8 lang: zh-cn # 语言设置为中文 9 emoji: # 为你的评论区引入表情 10 - https://gcore.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/ # 小豆泥 11 locale: 12 admin: 博主 # 设置评论区管理员标签 13 placeholder: |- # 评论框提示词，如果需要换行则输入换行符：\u0026#34;|-\u0026#34;，不需要换行的话可以删掉 14 您无需登录即可发表评论。如果需要收到回复通知，请留下您的邮箱地址。 15 非登录状态下，如果您留下邮箱，您的头像将自动获取并设置为您的邮箱账户头像。 16 由于vercle.app域名受到DNS污染，大陆ip地址无法参与评论。 17 nick: 昵称（选填） #昵称栏显示的标题文字，以下同理 18 mail: 邮箱（选填） 19 link: 网址（选填）但我在配置过程中还是遇到了评论区无法显示的问题，最后参考失迹的博客-建站技术 | 使博客更好地接入 Waline 第2.1条中的代码完美解决！如果有遇到同款问题，可以去阅读一下这篇文章。\n修改评论区样式 配置成功后，Waline评论区可以在本地预览网址localhost:1313中显示，可以同样用F12检查元素的方法更改评论框的样式。\n以下是我的样式：\n1 /* 评论区整体样式-by 失迹的博客 */ 2 .waline-container { 3 background-color: var(--card-background); 4 border-radius: var(--card-border-radius); 5 box-shadow: var(--shadow-l1); 6 padding: var(--card-padding); 7 --waline-font-size: var(--article-font-size); 8 } 9 .waline-container .wl-count { 10 color: var(--card-text-color-main); 11 } 12 /* 暗色模式下输入框背景 */ 13 [data-scheme=\u0026#34;dark\u0026#34;] .wl-panel { 14 background: #212121; 15 } 16 /* 提交按钮基础样式 */ 17 .wl-btn.primary { 18 background: var(--body-text-color); 19 border: none; 20 } 21 /* 提交按钮悬停\u0026amp;激活状态 */ 22 .wl-btn.primary:hover, .wl-btn.primary:active { 23 border: none; 24 background: var(--light-red); 25 } 26 /* 按正序、……悬停\u0026amp;激活状态 */ 27 .wl-sort li { 28 transition: color 0.2s ease-in-out; 29 \u0026amp;:hover { 30 color: var(--body-text-color); 31 } 32 \u0026amp;.active { 33 color: var(--light-red); 34 } 35 } 36 /* markdown按钮与悬停状态 */ 37 [data-waline] a { 38 color: var(--body-text-color); 39 transition: color 0.2s ease-in-out; 40 \u0026amp;:hover { 41 color: var(--light-red) 42 } 43 } 44 /* 删除、点赞、回复、编辑按钮悬停\u0026amp;激活状态 */ 45 .wl-card .wl-delete, .wl-card .wl-like, .wl-card .wl-reply, .wl-card .wl-edit { 46 transition: color 0.2s ease-in-out; 47 \u0026amp;:hover, \u0026amp;.active { 48 color: var(--light-red); 49 } 50 } 51 /* 登录按钮悬停\u0026amp;激活 */ 52 .wl-btn:hover, .wl-btn:active { 53 border-color: var(--light-red); 54 color: var(--light-red); 55 } 56 /* 表情、gif、图片、预览，悬停\u0026amp;激活状态 */ 57 .wl-action { 58 transition: color 0.2s ease-in-out; 59 \u0026amp;:hover, \u0026amp;.active{ 60 color: var(--light-red); 61 } 62 } 63 /* 昵称等标签栏（= =艰难对齐） */ 64 .wl-header label { 65 font-size: 1.4rem; 66 padding-top: 1.8rem; 67 padding-left: 2rem; 68 padding-right: 0; 69 } 70 /* 主输入框间距 */ 71 .wl-editor { 72 padding-left: 1.6rem; 73 padding-top: 0.5rem; 74 } 75 /* 昵称等栏输入框：间距、圆角、字体大小 */ 76 .wl-header input { 77 margin: 1rem; 78 border-radius: 4px; 79 font-size: 1.4rem; 80 } 81 /* 预览两个字的颜色 */ 82 .wl-preview h4 { 83 color: var(--body-text-color); 84 } 85 /* 去掉认证符号背景 */ 86 .wl-cards .wl-user .verified-icon { 87 background: none; 88 } 89 /* gif栏搜索框背景色、间距、圆角、输入符 */ 90 .wl-gif-popup input { 91 background-color: var(--card-background); 92 padding-left: 1.6rem; 93 border-radius: 8px; 94 \u0026amp;:focus-visible { 95 color: var(--body-text-color); 96 } 97 } 98 /* gif栏图片悬停效果与样式调整 */ 99 .wl-gif-popup img { 100 border-radius: 8px; 101 border: none; 102 transition: all 0.2s ease-in-out; 103 \u0026amp;:hover { 104 border-radius: 8px; 105 mask: linear-gradient(rgb(255, 255, 255) 0%, rgba(255, 255, 255, 0.75) 100%); 106 } 107 } 108 /* 去掉表情悬停时背景 */ 109 .wl-emoji-popup button:hover { 110 background: none; 111 } 112 /* 表情悬停效果：放大+旋转 */ 113 .wl-emoji-popup .wl-emoji { 114 transition: transform 0.3s ease-in-out; 115 \u0026amp;:hover { 116 transform: scale(1.5) rotate(-15deg); 117 } 118 } 119 /* 不显示评论ip和设备环境等 */ 120 .wl-card .wl-meta\u0026gt;span { 121 display: none; 122 } 123 /* 设置上一条的同时调整评论文字位置弥补空缺 */ 124 .wl-card .wl-content { 125 padding-top: 0; 126 }同时，因为我自定义了鼠标样式，也需要为评论区应用我的鼠标样式：\n1// .wl 和.waline 开头的是waline评论区的选择器 2// default光标图片 3body, 4html, 5.article-content img, 6.waline-container, 7.wl-header label { 8 cursor: url(../mouse/default.png), 9 auto !important; 10} 11 12// pointer光标图片 13a:hover, 14button:hover, 15.copyCodeButton:hover, 16#dark-mode-toggle, 17.wl-actions label, 18.wl-actions a, 19.wl-emoji-popup .wl-tab-wrapper button, 20.wl-gif-popup img, 21.wl-sort li { 22 cursor: url(../mouse/pointer.png), 23 auto !important; 24} 25 26// text光标图片 27input:hover, 28.site-description, 29.article-subtitle, 30.article-content span, 31.article-content li, 32.article-content p, 33.wl-editor, .wl-input, 34.wl-header input, 35[data-waline] p { 36 cursor: url(../mouse/text.png), 37 auto; 38}还隐藏了一些滚动条：\n1// 隐藏一大堆滚动条 2#TableOfContents, //导航栏 3#main-menu, //左侧菜单 4.wl-emoji-popup .wl-tab-wrapper,//评论区表情 5.wl-gallery, //评论区gif 6.wl-editor { //评论区主输入框 7 scrollbar-width: none; /* Firefox */ 8 -ms-overflow-style: none; /* IE and Edge */ 9} 10 11#TableOfContents::-webkit-scrollbar, 12#main-menu::-webkit-scrollbar, 13.wl-emoji-popup .wl-tab-wrapper::-webkit-scrollbar, 14.wl-gallery::-webkit-scrollbar, 15.wl-editor::-webkit-scrollbar { 16 display: none; /* Chrome, Safari and Opera */ 17}设置邮件通知 参考了失迹的博客-建站技术 | 使博客更好地接入 Waline 第4条中的邮件通知设置，与Sarakale-waline 邮件通知模板样式一览 中的邮件通知模板。\n在设置邮件通知过程中需要注意的是，\nGoogle账户需要开启两步验证才能生成应用专用密码； Vercel每次更改环境变量后都需要reploy才能生效。 此外，在测试邮箱通知功能时的几点发现：\n我用苹果默认邮箱应用打开收到评论的通知邮件，格式有所错位，但网页版邮箱是正常显示的，所以可能根据邮箱登录环境的不同效果会不一致； 非登录状态下，如果评论者留下了邮箱，Waline会自动获取邮箱账户的头像并设置为评论头像； 非登录状态下发表的评论只能由管理员删除； 每分钟只能发表一次评论。 碎碎念 我的Waline评论区用的是Vercel自动分配的网址。知道Vercel.app的域名墙内打不开，搜了一下相关文章貌似解决办法只能是套自定义域名，不愿意购买域名于是我暂且作罢= =\n所以目前我的评论区大陆ip地址是无法参与评论的\n此外文章点赞和访客数量功能，看到有很多大佬的博客分享了相关教程，但是本人数据敏感+嫌麻烦，也就不考虑做了\n目前我的博客差不多就装好了！除了背景图和头像没有画完以外，估计三年内都不会愿意动它了= =\n装修博客真的是一件费精力的事情，编程小白更是费力，我从10月1日开始用Stack主题，打这行字的时间是10月5日20:15，中间的时间基本都在折腾博客，一觉醒来就hugo服务器启动，git push完了就去睡觉……\n希望我的经验能够帮到其他人省下一些时间和精力。\n参考资料 Hugo官方文档 ；\nStack官方文档 ； Waline-快速上手 ;\n莱特雷-Hugo Stack主题自定义更改 ；\n树响集-Stack主题调整 ；\n第三夏尔-Hugo Stack博客主题装修 ；\nNaive Koala-Hugo Stack 魔改美化 ；\nB1ain\u0026rsquo;s Blog-hugo博客装修笔记 ；\n维基共享资源 ；\n失迹的博客-建站技术 | 使博客更好地接入 Waline ；\n田八-使用CSS让图片透明渐变 ；\nSarakale-waline 邮件通知模板样式一览 ","date":"2025-10-01T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E4%BD%A0%E5%A5%BDstack%E4%B8%BB%E9%A2%98/","title":"你好，Stack主题"},{"content":"本来写在星屑页面上，但觉得搭个博客来写会更好阅读一些，于是就搭了这个博客（？饺子醋）\n教程来源：\nYouTube-Brackeys: How to program in Godot - GDScript Tutorial B站搬运熟肉\rHello, World！ func _ready()\n节点第一次进入场景时会调用此函数。可以在此放置需要游戏运行时立刻执行的代码。\npass\n意味着什么都不做，出现在尚未填写的函数中\nprint(\u0026quot;Hello, World!\u0026quot;)\n控制台会打印输入的信息\ngdscript使用tab缩进来确定代码的结构，并对大小写敏感\nModifying nodes 1.0（修改节点1.0） 调整字体大小：右侧栏-control-theme overrides-font sizes\n通过脚本来编辑标签：1.引用label；2.获取label中的属性（右侧栏上有，鼠标停留会显示代码）\n引用：可以将左侧栏的laber拖拽到脚本中，通过.text来获取text属性\n也可以用这种方法改变其他的东西，如颜色\n有一个叫modulate的属性，可以用来修改立绘和UI的颜色（右侧栏-CanvasItem-Visibility-Modulate）\n1func _ready() -\u0026gt; void: 2 $Label.text = \u0026#34;Hello, World!\u0026#34; 3 $Label.modulate = Color.GREEN Input 项目-项目设置-输入映射\n在此可以添加动作，动作允许我们将键位绑定到某些事件上\n命名并添加动作，点击加号输入需要绑定的键位\n在脚本中，需要创建一个输入函数，输入func _input回车，会自动补全\n这个函数会在每次游戏接收任何输入时调用。需要检查触发输入的事件是否是我们按下的操作：\nif event.is_action_pressed():括号会弹出可选的目标动作\n假设操作对象是label，需要在按键时将其颜色改为红色，则引用label，\n$Label.modulate = Color.RED\n检查动作何时结束\nif event.is_action_released():\n利用相同的代码将颜色改回绿色\n$Label.modulate = Color.GREEN\nVariables 1.0 变量：保存信息的容器\n例如使用变量保存玩家角色的信息\n将默认血量设置为100\nvar health = 100\n然后可以在_ready()函数中打印这个变量\nprint(health)\n可以对血量进行计算\n1health = 40 2health = 20+30 3health += 20 4health -= 10 5health *= 4 6health /= 2 写一个每次按键减少血量的脚本\n1extends Node 2 3var health: int = 100 4 5func _input(event: InputEvent) -\u0026gt; void: 6 if event.is_action_pressed(\u0026#34;my_action\u0026#34;): 7 health -= 10 8 print(\u0026#34;Health: %d\u0026#34; % health) If-statements（条件语句） if语句检测一个条件是否被满足\n可以用if语句对变量做出反应，如希望玩家在血量为0时死亡\n1if health \u0026lt;= 0: 2 health = 0 3 print(\u0026#34;Game Over\u0026#34;)此代码中使用if health \u0026lt;= 0:将血量与0比较。\n其他的比较还有：\n1x == y 等于 2x \u0026gt; y 大于 3x \u0026gt;= y 大于等于 4x != y 不等于 5x \u0026lt; y 小于 6x \u0026lt;= y 小于等于 可以使用and关键词添加另一个条件并确保两者都需要满足\n使用or确保只需要满足其中之一条件\nif x == y or y \u0026gt; z\n还可以使用else关键词来定义当条件不满足时发生什么\n1else: 2 print(\u0026#34;You are still alive\u0026#34;) 用elif合并else和if语句\n1if health \u0026lt;= 0: 2 health = 0 3 print(\u0026#34;Game Over\u0026#34;) 4elif health \u0026lt; 50: 5 print(\u0026#34;Warning: Low Health\u0026#34;) 6else: 7 print(\u0026#34;You are still alive\u0026#34;) Comments 在一行的上方或后方对代码进行注释\n# This is a comment\n可以通过在代码前面加\u0026quot;#\u0026ldquo;暂时删除部分代码的执行\n编程规范：如果注释掉的是代码的话，不要在\u0026rdquo;#\u0026ldquo;后加空格\n#print()\n可以选择多行代码，右键单击切换注释（godot内有效，vs code没找到这个功能）\n但：不能有一个完全空白的函数，需要添加关键字pass避免报错\nVariables 2.0 创建和声明变量时，需要考虑在哪里这样做\n如果在if语句内部声明一个变量，就只能在该if语句里使用该变量。这叫做SCOPE（范围）\n如果希望在脚本的各个地方都能读取变量，应该将其放在代码的顶部，在任何函数之外\n1extends Node 2 3var script_variable = 100 4 5func _ready(): 6 var ready _variable = 100 gdscript的优点：可以声明变量而无需考虑数据类型\n1var godot_is_cool = true 2var coolness = 9001 3coolness = true DATA TYPES 在gdscript中，有四种经典数据类型：\nBoolean/bool（布尔变量）：表示true和false\ninteger/int：表示整数\nfloat：表示小数\nstring（字符串）：表示文字\n从一种类型转为另一种类型：casting（类型转换）\n1var number =42 2var text = \u0026#34;Meaning of Life: \u0026#34; + str(number) 3print(text)通过str()将其转化为字符串，输出：Meaning of Life: 42\n1var pi = 3.14 2print(int(pi))将小数输出为整数。需要注意的是它只是去掉了小数点后的数字，不会进行四舍五入。\n两种常见数据结构：Vector2和Vector3\nVector2存储两个浮点数：x和y，\nVector3存储三个浮点数：x和y和z\n1var position = Vector3(3, -10, 5) 2position.x += 2 3print(position) 默认情况下，gdscript是动态类型，这意味着创建变量时，不需要定义它可以储存什么类型的数据\n然而，它也更容易出现错误，并且它的性能低于静态类型\n但gdscript允许我们定义变量的类型\nvar damage: int = 15 也可以通过写:= 15来让godot自动确认数据类型，这称为推断类型，得出的结果是一样的，godot意识到15是个整数，于是将变量设置为int\n这也意味着该变量不能更改为其他类型。如果尝试将其设置为一个字符串，\n1var damage := 15 2 3func _ready(): 4 damage = \u0026#34;A lot!\u0026#34;将会报错。\n在变量前添加@export可以将其暴露在检查器里。\n@export var damage := 15\n保存代码并点击左侧栏的节点（Node）,可以在右侧栏检查器中设置变量\n如果print(damage)，可以看到通过检查器设置的值会在游戏中更新。可以按小圆圈恢复到默认值\nconstant（常量）：定义一个不想改变的变量\nconst GRAVITY = -9.81\n使用大写字母表示常量。\n常量不能被改写，否则会报错\nFunctions 函数是编程的基础，它们允许您将代码捆绑在可重复利用的packages\nfunc _ready() func _input() 下划线表明这些函数不是由我们激活或调用的，而是由引擎本身\n在godot中，可以创建自己的函数\nfunc jump() func die() func shoot() func respawn()\n开始创建一个函数\n1func jump(): 2 #添加向上的力 3 #播放声音 4 #播放跳跃动画 5 print(\u0026#34;JUMP!\u0026#34;)为了不让每次按下空格就调用这个函数，于是在前面写input函数：\n1func _input(event): 2 if event.is_action_pressed(): 3 jump() 4 5func jump(): 6 #添加向上的力 7 #播放声音 8 #播放跳跃动画 9 print(\u0026#34;JUMP!\u0026#34;) 在代码中，我们将给函数的输入称为参数（parameters），将输出称为返回值（returns）\n创建一个将两个数字相加的函数func add():，在括号中添加参数func add(num1, num2):。在函数中，我们可以将它们加在一起并将它们储存在一个叫result的变量中\n1func add(num1, num2): 2 var result = num1 + num2 3 print(result)可以在ready函数中调用add()：\n1func _ready(): 2 add(3, 5)运行后会打印出8。\n但该函数目前并不返回结果，只是打印结果。为了在ready函数访问并调用add函数的结果，我们将add函数的print替换为return。\n1func add(num1, num2): 2 var result = num1 + num2 3 return(result) 4 5func _ready(): 6 var result = add(5, 10) 7 print(result) 利用return还可以做更多的事：\n1func add(num1, num2): 2 var result = num1 + num2 3 return(result) 4 5func _ready(): 6 var result = add(5, 10) 7 result = add(result, 10) 8 print(result)打印25。\n和声明变量时一样，也可以定义函数的参数和返回类型\nfunc add(num1: int, num2: int) -\u0026gt; int:\n使用箭头-\u0026gt;来设置返回值类型\nRandom numbers 函数randf给出0-1之间的随机数，非常适合为代码分配概率。（抽卡）\n1func _ready(): 2 var roll = randf() 3 if roll \u0026lt;= 0.8: 4 print(\u0026#34;Common item\u0026#34;) 5 elif roll \u0026lt;= 0.95: 6 print(\u0026#34;Rare item\u0026#34;) 7 else: 8 print(\u0026#34;Legendary item\u0026#34;) (真的没问题吗用这个代码抽了十次出了四次rare )\n（试着结合目前学的写了个按下按键抽卡的代码： 1extends Node 2 3var roll: float = 0.0 4var item_type: String = \u0026#34;\u0026#34; 5 6func _input(event: InputEvent) -\u0026gt; void: 7 if event.is_action_pressed(\u0026#34;my_action\u0026#34;): 8 roll = randf() 9 if roll \u0026lt;= 0.8: 10 item_type = \u0026#34;Common item\u0026#34; 11 elif roll \u0026lt;= 0.95: 12 item_type = \u0026#34;Rare item\u0026#34; 13 else: 14 item_type = \u0026#34;Legendary item\u0026#34; 15 print(item_type) 还可以使用randf_range()和randi_range()来得到一个指定范围内的随机整数或小数\n比如给角色随机生成身高可以用\n1var character_height = randi_range(140, 210) 2print(\u0026#34;Your character is \u0026#34; + str(character_height) + \u0026#34;cm tall.\u0026#34;) GD的官方文档和编辑器是连着的。\n这意味着按住ctrl并单击代码中想要了解更多信息的内容，它会在编辑器中直接打开官方文档\nArrays 数组：可以容纳多个事物的变量。可以用于存储整个元素列表。\n制作一个用于保存玩家物品的列表：\nvar items = [\u0026quot;Potion\u0026quot;, 3, 6]\nGD Script的列表可以包含不同类型的变量。\n但如果想将数组限制为特定类型，我们可以进行定义:\nvar items: Array[String] = [\u0026quot;Potion\u0026quot;, \u0026quot;Feather\u0026quot;, \u0026quot;Stolen harp\u0026quot;]\n使用索引来访问数组中的元素：当你向数组添加一个元素时，它会根据它在数组中的位置自动分配一个数字。\n如在var items: Array[String] = [\u0026quot;Potion\u0026quot;, \u0026quot;Feather\u0026quot;, \u0026quot;Stolen harp\u0026quot;]中，三个元素的索引依次为0、1、2。\n因此，要想访问并打印数组中的第一个元素：\n1var items: Array[String] = [\u0026#34;Potion\u0026#34;, \u0026#34;Feather\u0026#34;, \u0026#34;Stolen harp\u0026#34;] 2print(items[0])打印出Potion。\n更改元素：\n1var items: Array[String] = [\u0026#34;Potion\u0026#34;, \u0026#34;Feather\u0026#34;, \u0026#34;Stolen harp\u0026#34;] 2items[1] = \u0026#34;Smelly Sock\u0026#34; 3items[2] = \u0026#34;Staff\u0026#34; 查找、删除或添加新元素：\n1items.remove_at(1) # 删除索引为1的元素 2items.append(\u0026#34;Overpowered Sword\u0026#34;) # 添加新元素（将被加到列表的最后） 数组有时会变得很长很难管理。可以用循环（Loops）来帮助解决这个问题。\nLoops 循环允许我们多次重复代码，可以用来逐个访问列表中的元素。\n比如打印var items: Array[String] = [\u0026quot;Potion\u0026quot;, \u0026quot;Feather\u0026quot;, \u0026quot;Stolen harp\u0026quot;]列表中的所有元素，可以用for循环：\n1for item in items: 2 print(item)添加更多功能，如仅打印长度超过六个字母的物品：\n1for item in items: 2 if item.length() \u0026gt; 6: 3 print(item)这将只会打印Stolen harp。\n创建会运行一定次数的代码循环：\n1for n in 8: 2 print(n)打印出的变量n将从0开始一直增加到7（运行了8次）。我们说n是for循环的当前循环。\nwhile循环：只要满足特定条件就会一直重复此过程的循环。\n如使用while循环使玻璃杯装满半杯水：\n1var glass := 0.0 2 3while glass \u0026lt; 0.5: 4 glass += randf_range(0.01, 0.2) 5 print(glass) 6 7print(\u0026#34;The glass is now half full!\u0026#34;)以下是一次运行的结果：\n10.18732265214986 20.30365408708942 30.37735687756539 40.46053994937302 50.6523261380621 6The glass is now half full! 使用while循环时，注意不要创建无限循环。这容易导致程序崩溃。\n如注释掉上面的代码中往杯子里添加随机数的一行，运行后将无限输出0并报错，godot可能会无法响应。\n使用break continue关键字：\nbreak：跳出循环并继续执行后面的代码\ncontinue：立即跳到循环的下一次迭代\n如果想要检查杯子是否被倒了20%满：\n1var glass := 0.0 2 3while glass \u0026lt; 0.5: 4 glass += randf_range(0.01, 0.2) 5 6 if glass \u0026gt; 0.2: 7 break 8 9 print(glass) 10 11print(\u0026#34;The glass is now half full!\u0026#34;)运行结果：\n10.0389682989115 20.09942385229739 3The glass is now half full! 虽然数组非常适合储存元素列表，但有时使用索引访问每个元素会容易搞混，有时用字典更合适\nDictionaries 字典会保存很多对的“索引（key）”和“数值（value）”。\nkey：想要查找的词\nvalue：这个词的定义\n创建空字典：var my_dict = {}\n可以在大括号内添加“键值对（key-value pairs）”\n例如：游戏中有多名玩家，使用字典来跟踪他们\nkey：用户名；value：等级\n1var players = { 2 \u0026#34;Crook\u0026#34;: 1, 3 \u0026#34;Villain\u0026#34;: 35, 4 \u0026#34;Boss\u0026#34;: 100, 5}要想获取玩家的等级，只需输入用户名即可\n`print(players[\u0026ldquo;Villain\u0026rdquo;])\n分配新值或添加条目\n1players[\u0026#34;Villain\u0026#34;] = 50 2players[\u0026#34;Dwayne\u0026#34;] = 999 像数组一样，可以用for循环遍历字典。这样做时实际上是在循环所有字典中的key，即用户名。\n1for username in players: 2 print(username + \u0026#34;: \u0026#34; + str(players[username]))这样会打印出整个字典：\n1Crook: 1 2Villain: 50 3Boss: 100 4Dwayne: 999 就像数组一样，可以在同一个字典中拥有多种数据类型的键和值\n甚至可以数组套数组，或者字典套字典\n比如不仅想存储玩家的等级，还想存储其他信息（如生命值），只需用另一个字典来替换值即可：\n1var players = { 2 \u0026#34;Crook\u0026#34;: {\u0026#34;Level\u0026#34;: 1, \u0026#34;Health\u0026#34;: 80}, # 使用缩进来保持代码简洁 3 \u0026#34;Villain\u0026#34;:\t{\u0026#34;Level\u0026#34;: 50, \u0026#34;Health\u0026#34;: 150}, 4 \u0026#34;Boss\u0026#34;: {\u0026#34;Level\u0026#34;: 100, \u0026#34;Health\u0026#34;: 500}, 5}现在我们可以使用两个键来访问一个值： print(players[\u0026quot;Boss\u0026quot;][\u0026quot;Health\u0026quot;]) 打印出500。\n这样我们就可以想办法构建有关游戏中正在发生的情况的数据，例如玩家统计数据、库存、增益等。\nEnums 枚举：在游戏中定义标签和状态的便捷方法\n假设我们正在制作游戏，游戏里有一堆单位，我们需要一种方法将每个单位标记为敌对、中立或盟友。可以创建一个定义这些标签的枚举。\n在脚本顶部（进入节点和func_ready中间）写一个enum： enum { ALLY, NEUTRAL, ENEMY }\n现在我们可以在游戏中使用这些状态。\n例如，我们可以创建一个名为“单位势力（unit_alignment）”的变量，并设置它等于上述状态中的哪一个：\nvar unit_alignment = ALLY\n给enum命名，让代码井井有条：\nenum Alignment { ALLY, NEUTRAL, ENEMY } 这时要访问这个枚举必须要进入势力枚举：\nvar unit_alignment = Alignment.ALLY\n选择Alignment.ALLY作为默认值。在ready内部，可以检查单位势力是否等于Alignment.ENEMY。\n1extends Node 2 3enum Alignment { ALLY, NEUTRAL, ENEMY } 4 5var unit_alignment = Alignment.ALLY 6 7func _ready() -\u0026gt; void: 8 if unit_alignment == Alignment.ENEMY: 9 print(\u0026#34;You are not welcome here.\u0026#34;) 10 else: 11 print(\u0026#34;Welcome.\u0026#34;)打印出\u0026quot;Welcome.\u0026quot;，因为我们的部队目前是盟友\n使用枚举要比使用字符串或整数来表示状态更安全，因为这样拼错了的话godot会报错\n可以把枚举用在@export变量里： 把var unit_alignment = Alignment.ALLY改为：@export var unit_alignment : Alignment，现在我们可以在右边栏检查器中设置我们的单位势力。\n如果在检查器中将势力设置为敌人，将会打印出\u0026quot;You are not welcome here.\u0026rdquo;\n上述的幕后实际是godot为正在枚举的每一个状态创建了一个常量：\n1enum Alignment { ALLY, NEUTRAL, ENEMY } 2 3const ALLY = 0 4const NUETRAL = 1 5const ENEMY = 2 6 7@export var unit_alignment : Alignment所以枚举本质上是一堆值不断增加的常量。\n如果我们打印这些状态中的一个：\n1extends Node 2 3enum Alignment { ALLY, NEUTRAL, ENEMY } 4 5@export var unit_alignment : Alignment 6 7func _ready() -\u0026gt; void: 8 print(Alignment.ENEMY)打印出2，即godot后台为第三个状态ENEMY设置的常量的值。\n如果需要的话，我们甚至可以覆盖godot设置的默认值。如： enum Alignment { ALLY = 1, NEUTRAL = 0, ENEMY = -1 }\n有了枚举之后，我们可以使用match语句。\nmatch语句方便我们为每一个枚举状态使用不一样的代码\nMatch Match（匹配）：相当于其他语言中的switch语句，允许我们根据变量的值执行不同的代码 可以使用match语句为枚举的不同值添加一些代码： 1extends Node 2 3enum Alignment { ALLY, NEUTRAL, ENEMY } 4 5@export var my_alignment : Alignment 6 7func _ready() -\u0026gt; void: 8 match my_alignment: 9 Alignment.ALLY: 10 print(\u0026#34;Hello, friend!\u0026#34;) 11 Alignment.NEUTRAL: 12 print(\u0026#34;I come in peace!\u0026#34;) 13 Alignment.ENEMY: 14 print(\u0026#34;TASTE MY WRATH!\u0026#34;) 15 _: # 设置默认值，即不是上述任何一种情况时 16 print(\u0026#34;Who art thou?\u0026#34;) Modifying nodes 2.0（修改节点2.0） 到目前为止，当我们需要访问节点时，我们是通过以下方式完成的：\n将其拖动到脚本中，这会创建一个美元符号，后面跟着节点的路径\n实际上，我们可以将此路径存储在变量中，只需将其拖至顶部并按住Ctrl键释放即可。这会自动创建一个带有节点名称和正确路径的变量：\n@onready var weapon = $Player/Weapon godot对节点的创建有非常严格的顺序。如果我们打开游戏并尝试在武器节点被创建之前找到它，将会报错。@onready确保godot会等待所有子节点都被创建后再访问，这样就不会报错了。（即预加载）\n美元符号$实际上是使用get_node函数的简写：\n@onready var weapon = $Player/Weapon = @onready var weapon = get_node(Player/Weapon)\n路径是相对的。我们的脚本位于主节点上，因此它在该节点之后立即启动。当然也可以在脚本里获取绝对路径：\nprint(Weapon.get_path())\n这会打印从根节点开始到武器的绝对路径：/root/Main/Player/Weapon\n路径对很多事情来说很有用，但有时也有点不灵活：\n如果重命名路径中的任何节点，路径就会失效。 路径一般只用于访问子节点。\n幸运的是，我们可以用@export关键字来引用其他节点：\n@export var my_node: Node\n然后在检查器中，我们可以为它分配我们想要的任何节点，或者只需要单击左侧栏中的节点名称并拖动到检查器上即可\n我们还可以使用is关键字检查节点是否是某种类型：\n1extends Node 2 3@export var my_node: Node 4 5func _ready(): 6 if my_node is Node2D: 7 print(\u0026#34;Is 2D!\u0026#34;) 我们甚至可以声明我们希望能够引用什么类型的节点。\n例如我们只想引用立绘节点（sprite node），只需将类型改为Sprite2D：\n@export var my_node: Sprite2D 这时在检查器中重置变量，现在只能给它分配立绘节点了。\n这时运行游戏，仍然会打印出“Is 2D!”，这是因为Sprite2D继承自Node2D\nSignals 信号：节点可以互相发送的信息。用来通知发生了某个事件。\nGodot有很多内置信号。在右侧栏节点可以查看和连接信号。\n信号连接成功时，脚本会多出一行函数并显示绿色箭头表示连接成功。\n点击绿色箭头可以查看信号源。\n可以为一个信号连接任意数量的函数，当信号发射时，所有函数都会被调用。\n这允许我们以一种无需相互了解的方式将节点链接在一起。\n按钮只需要发射信号，不需要了解哪些函数连接到了该信号。\n这使得信号很适合和用于模块化的游戏。（called Decoupling: 去耦 / 解耦）\n使用例：\n假设我们正在扮演一个能够获得Xp并升级的角色，当升级时可能会有很多游戏系统需要更新：UI、数值、咒语、成就系统\n从玩家脚本中调用这些内容会变得一团糟。\n相反，可以创建一个名为leveled_up的信号，所有的系统都可以连接到这个信号，玩家升级时发出这个信号：\n1signal leveled_up 2 3func level_up(): 4 # code here 5 leveled_up.emit()在Node节点Main下添加子节点Timer，设置Timer的参数为Wait Time: 1；Autostart: on。\n这样它会计时1秒，并当秒数归零时发出_timed_out()信号。\n接入信号到Main节点：\n1extend Node 2 3var xp := 0 4 5func _on_timer_timeout(): 6 xp += 5 7 print(xp) 8 if xp \u0026gt;= 20: 9 xp = 0运行时每秒经验+5，达到20后归零。\n现在我们创建一个其他节点可以连接的信号。在顶部写signal leveled_up()，保存，可以看到主节点多了一个leveled_up()信号。\n对于本示例，我们将其连接回Main节点。这会创建一个_on_leveled_up()函数，当信号发出时调用。\n1extend Node 2 3signal leveled_up() 4 5var xp := 0 6 7func _on_timer_timeout(): 8 xp += 5 9 print(xp) 10 if xp \u0026gt;= 20: 11 xp = 0 12 leveled_up.emit() 13 14func _on_leveled_up(): 15 print(\u0026#34;DING!\u0026#34;)现在，达到20Xp时会发出信号并打印\u0026quot;DING!\u0026quot;\n也可以通过代码来连接信号：\n1func _ready(): 2 leveled_up.connect(_on_leveled_up)断开连接：把connect改为disconnect即可。\n也可以通过信号传递参数：\n1extend Node 2 3signal leveled_up(msg) # 括号内添加参数名 4 5var xp := 0 6 7func _ready(): 8 leveled_up.connect(_on_leveled_up) 9 10func _on_timer_timeout(): 11 xp += 5 12 print(xp) 13 if xp \u0026gt;= 20: 14 xp = 0 15 leveled_up.emit(\u0026#34;GZ!\u0026#34;) # 发出信号时参数的信息 16 17func _on_leveled_up(): 18 print(msg) # 不再打印ding，而是打印参数 Get… Set… GO! Getter和Setter允许我们在变量更改时添加代码。\n这意味着我们可以在修改或读取变量时做一些事情，例如将值限制在一定范围内或发出信号，让其它部分的代码知道变量发生了变化。 Setter 常见例子：生命值 限制生命值变量的范围： 1var health := 100: # 添加生命值变量，默认为100 2 set(value): # 命名被传入的值为value，即试图将变量更改为这个value值 3 health = clamp(value, 0, 100) # 使用clamp()函数将生命值限制在0-100之间 创建信号： 1signal health_changed(new_health) # 创建生命值发生变化信号，输入新的生命值作为参数 2 3var health := 100: 4 set(value): 5 health = clamp(value, 0, 100) 6 health_changed.emit(health) # 信号释放时，改变生命值 7 8func _ready(): 9 health = -150 # 分配生命值-150 10 11func _on_health_changed(new_health): #连接信号并打印新的生命值 12 print(new_health)运行后，会打印出0，\n这是因为-150被限制在0-100之间，然后发出信号，信号会调用_on_health_changed()函数并打印新的生命值。 Getter 常用于转换值。\n1var chance := 0.2 2var chance_pct: int: # 设置变量：机会百分比数 3 get: 4 return chance * 100 5 6func _ready(): 7 print(chance_pct) 8 chance = 0.6 9 print(chance_pct)打印出20、60。即机会百分比变量完全取决于机会变量是多少。\n加入Setter：\n1var chance := 0.2 2var chance_pct: int: 3 get: 4 return chance * 100 5 set(value): 6 chance = float(value) / 100.0 # 注意由于chance是小数，因此要确保value也是小数 7 8func _ready(): 9 print(chance_pct) 10 chance_pct = 40 # 现在可以直接通过修改机会百分比改变机会变量了。 11 print(chance_pct)打印出20、40。\n由于加入了Setter，chance_pct的value修改时，触发Setter：重新计算chance。\n由于执行print(chance_pct)，为了获取chance_pct的值，再走一遍Getter：返回chance的值乘以100，因此第二个打印的值是40。\nClasses GD Script是一门面向对象的编程语言，这意味着我们通常尝试在包含的对象内构建代码，然后让它们彼此相互作用。我们主要使用Classes来完成此操作。\n例：我们在制作一款RPG游戏，我们需要创建一堆可以互动的角色。因此我们创建一个角色类，这个类含有一些游戏中所有角色都应该具备的变量和逻辑：\nVARIABLES FUNCTIONS name talk() health die() dialogue 我们获取这个类并创建实例（INSTANCES）。\n实例是该类的特定版本。我们可以创建一个叫POTION SELLER的实例，health = 50，talk(\u0026quot;You can't handle my strongest potions!\u0026quot;)\n你还可以创建更多别的实例，所有实例拥有相同的变量，但值不同：\nINSTANCES POTION SELLER EX-ADVENTURER KNIGHT VARIABLES health = 50 health = 30 health = 130 FUNCTIONS talk(\u0026ldquo;You can\u0026rsquo;t handle my strongest potions!\u0026rdquo;) talk(\u0026ldquo;I used to be an adventurer like you!\u0026rdquo;) die() 实际上你已经在Godot中遇到一堆类了。这是因为Godot的内置节点是类。所有的节点都是具有一堆变量和逻辑的自包含对象（Self-contain object），我们可以创建它们的实例。 （这句机翻好奇怪但我也不知道怎么翻，后半句是从句- - All the nodes are… that we can create instances of. ）\n如果我们添加一个SpriteNode，我们就实例化了Sprite类。所以我们创建一个脚本的同时，我们也是在创建一个类。（在技术上不是在创建一个类，但它的工作方式与类一样）\n在主节点下添加子节点Character。现在，为了更清楚地表明我们的脚本是一个定义角色的类，设置类名为\u0026quot;Character\u0026quot;：\n1class_name Character #注意C大写 2 3extends Node 4 5@export var profession : String #在检查器中加入变量：职业（字符串） 6@export var health: int #生命值：整数\n我们可以通过复制此节点来创建更多实例。\n此处弹幕讨论\r弹幕\u0026nbsp;\u0026nbsp;\u0026nbsp;\r这么做的意义是什么？不能直接用字典吗？\r弹幕\u0026nbsp;\u0026nbsp;\u0026nbsp;\r字典只是一个索引，可以存放角色的基本信息但是功能性的逻辑还是要靠函数来实现啊。要写函数就得进脚本。\r弹幕\u0026nbsp;\u0026nbsp;\u0026nbsp;\r类是面向对象最重要的概念之一。类比下，类是蓝图，我们可根据蓝图，创造蓝图设计范围内的各式各样的实体。字典的主要功能仅是存储数据，而类则是创建新的实体（对象）。并且由于继承和多态的存在，有很多花活可整\r弹幕\u0026nbsp;\u0026nbsp;\u0026nbsp;\r字典内数据不方便改动和操作，所以倾向于放静态数据，类成员里面可以进行大量逻辑和数据的内容，放动态数据比较好。\r我们还可以给这个脚本一个函数：\n1class_name Character 2 3extends Node 4 5@export var profession : String 6@export var health: int 7 8func die(): 9 health = 0 10 print(profession + \u0026#34;died.\u0026#34;)这就是我们的角色类，但目前还没有任何东西触发添加的这个函数。\n让我们进入主节点，在这里我们可以设置引用角色并调用die函数。\n简单地把角色节点拖动到脚本中引用是可以的，但因为我们已经命名了角色类，因此可以使用@export关键词作为替代。\n这样我们就可以在编辑器中建立连接，而不用担心路径改变的问题。\n1extends Node 2 3@export var character_to_kill: Character 4 5func _ready(): 6 character_to_kill.die()\r保存后可以看到主节点检查器中可以选择哪个角色被杀死。\nInner classes 内部类：存在于另一个类中的类。\n主要被用来将变量捆绑在一起，也可以添加一点函数\n内部类可以很好地替代字典，因为使用起来更安全\n假设往角色类中添加一些装备（equipment），我们可以创建一个名为Equipment的内部类。\n1class_name Character 2 3extends Node 4 5class Equipment: 6 var armor := 10 7 var weight := 5\r现在我们可以在脚本中使用Equipment内部类，利用它创建一些变量：\n1class_name Character 2 3extends Node 4 5var chest := Equipment.new() # 调用.new将创建一个Equipment类的实例 6var legs := Equipment.new() 7 8class Equipment: 9 var armor := 10 10 var weight := 5\r在_ready函数中可以访问这些类：\n1class_name Character 2 3extends Node 4 5var chest := Equipment.new() # 调用.new将创建一个Equipment类的实例 6var legs := Equipment.new() 7 8func _ready(): 9 chest.armor = 20 10 print(chest.armor) 11 print(legs.weight) 12 13class Equipment: 14 var armor := 10 15 var weight := 5\r这比使用字典更安全，因为GD Script会识别Equipment类中有一个weight变量，打错字可以在运行游戏之前报错。这被称为类型安全（Type Safe）。\n保存并运行，可以看到每一个角色中的实例（即先前复制的角色节点）都将打印这两件装备。\nInheritance 继承关系：从一个类中衍伸出另一个类的能力。\n实际上我们已经在这么做了：脚本中的extends Node，即该脚本衍伸自Node类（在上节已学过Godot的节点本质上是类），意味着Node类的函数和变量也可以在脚本中使用\nGodot的可视化：可以查看节点的继承信息，甚至可以在列表中找到刚创建的Character类。这是因为当创建Character类时，本质上是在定义一个新的节点类型。\n在实际使用中，需要确保脚本继承自正确的类，这样才能确保我们实现想要的目的\n比如我们正在制作一个让玩家移动的脚本：\n创建CharacterBody2D节点并添加脚本，脚本会自动extends CharacterBody2D。\n现在我们可以访问这个节点中的所有功能（functionality），例如：velocity move_and_slide()（这个函数可以让节点在空间中移动）\nComposition 组合结构：尽管Godot对它的节点使用了继承关系，但还有更好的构建代码的方法。\nGodot实际上非常倾向于使用另一种叫做组合结构的方式。\nBrackeys推荐的讲解Composition的频道： YouTube-Bitlytic: How You Can Easily Make Your Code Simpler in Godot 4 B站搬运熟肉\r直接把笔记做在一起了吧\nInheritance（继承）和Composition（组合）是编程中常用的两种技巧，可以最大程度地复用代码。\n虽然继承用得比较多，但很多情况下使用组合会更好。\n例：创建Player和Enemy：\nPlayer Enemy Attack Attack Health Health Hitbox Hitbox User Input AI Stuff 如果使用继承，我们会把attack、health、hitbox抽象出来封到独立的类中。\n暂且叫这个类Entity（实体），玩家和敌人都将继承这个类：\nEntity Attack Health Hitbox Player User Input Enemy AI Stuff 这就将代码放在了一起，修改代码会同时影响玩家和敌人，而不需要在每一个类中慢慢改 如果只是这样，继承简直是完美方案，\n但假如我们再定义一棵树，它也可以承受伤害，因此我们让它继承Entity类，然而这样会导致一些小问题：\n它确实是有生命值和碰撞箱了，但它也具有了攻击的能力\n更大的问题是，玩家和敌人都是CharacterBody2D节点，而树是StaticBody2D节点，而在Godot中是不允许同时继承多个类的。\n因为玩家和敌人是CharacterBody2D，那么Entity类也需要继承CharacterBody2D，这会导致树也得是CharacterBody2D的\n如果使用组合，不抽象为一个大类（super class），而是使用多个组件（Components）:\nComponents AttackComponents HealthComponents HitboxComponents Player Attack Health Hitbox User Input Enemy Attack Health Hitbox AI Stuff Tree Health Hitbox 组件对继承的类没有要求，可以各取所需。 在这个例子中使用组件比使用继承好得多，\n但也有比较麻烦的事，比如怎么让碰撞箱检测到生命值组件以发送受伤信息，但这是值得的\n在Godot中，这些组件都可以被处理为子节点，可以任意地添加到需要的节点中 例子\n以后再看\nCall down, signal up 往下用调用，往上用信号\n编写GD Script时，遵循良好的编程习惯。这是节点之间通信时的一个经验法则。\nGodot中的每个节点都是一棵节点树。起点被称为根节点。\n一个节点位于另一个节点上方，我们称它们有亲子关系。上面的是父节点，下面是子节点。\n1Main # PARENT 2|--Player # CHILD 3| |--Graphics # Player的CHILD 4| |--Collider 5|--Enemy 往下用调用，往上用信号意味着父节点应该调用子节点的函数，反之则不然。\n相反，子节点应该用信号来与父节点交流，父节点可以根据接到这些信号的函数采取相应的行动。\n同一级别的两个节点：SIBLINGS\n这时，共同的PARENT负责将来自一个SIBLING发出的信号连接到另一个SIBLING的函数上。通常是在_ready()函数中完成的。 Styyyle 写码格式\nGDScript 编写风格指南 终于把这个视频看完了，短短一个小时让我啃了大半个月\n","date":"2025-09-23T00:00:00Z","permalink":"https://ryihuan.github.io/p/gd-script%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%99%E7%A8%8B-by-brackeys/","title":"GD Script学习笔记（教程 by Brackeys）"},{"content":"谢谢莱特雷的Hugo+Github部署博客教程 谢谢网友们让我觉得应该把开博客作为互联网生涯的一个选项（？\n谢谢gpt老师 deepseek老师\n总之我终于可以开启博客生涯耶耶耶 ","date":"2025-09-23T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E6%88%90%E7%AB%8B%E5%8D%9A%E5%AE%A2/","title":"成立博客"}]